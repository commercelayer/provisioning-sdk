
import * as api from './api'
import type { ApiError } from './error'
import type { ErrorInterceptor, InterceptorType, RawResponseReader, RequestInterceptor, ResponseInterceptor, ResponseObj, HeadersObj } from './interceptor'
import { CommerceLayerProvisioningStatic } from './static'
import ResourceAdapter, { type ResourcesInitConfig } from './resource'

import Debug from './debug'
const debug = Debug('commercelayer')


// Autogenerated schema version number, do not remove this line
const OPEN_API_SCHEMA_VERSION = '1.0.0'
export { OPEN_API_SCHEMA_VERSION }


// SDK local configuration
type SdkConfig = {
	// abc?: string
}

type CommerceLayerInitConfig = SdkConfig & ResourcesInitConfig
type CommerceLayerConfig = Partial<CommerceLayerInitConfig>



class CommerceLayerProvisioningClient {

	// static get openApiSchemaVersion(): string { return OPEN_API_SCHEMA_VERSION }
	readonly openApiSchemaVersion = OPEN_API_SCHEMA_VERSION

	readonly #adapter: ResourceAdapter
	// #organization: string
	// #environment: ApiMode = sdkConfig.default.environment

	// ##__CL_RESOURCES_DEF_START__##
	// ##__CL_RESOURCES_DEF_TEMPLATE:: ##__TAB__####__RESOURCE_TYPE__##: api.##__RESOURCE_CLASS__##
	api_credentials: api.ApiCredentials
	memberships: api.Memberships
	organizations: api.Organizations
	permissions: api.Permissions
	roles: api.Roles
	user: api.Users
	versions: api.Versions
	// ##__CL_RESOURCES_DEF_STOP__##


	constructor(config: CommerceLayerInitConfig) {

		debug('new commercelayer provisioning instance %O', config)

		this.#adapter = new ResourceAdapter(config)
		// this.#environment = 'test'

		// ##__CL_RESOURCES_INIT_START__##
		// ##__CL_RESOURCES_INIT_TEMPLATE:: ##__TAB__####__TAB__##this.##__RESOURCE_TYPE__## = new api.##__RESOURCE_CLASS__##(this.#adapter)
		this.api_credentials = new api.ApiCredentials(this.#adapter)
		this.memberships = new api.Memberships(this.#adapter)
		this.organizations = new api.Organizations(this.#adapter)
		this.permissions = new api.Permissions(this.#adapter)
		this.roles = new api.Roles(this.#adapter)
		this.user = new api.Users(this.#adapter)
		this.versions = new api.Versions(this.#adapter)
		// ##__CL_RESOURCES_INIT_STOP__##

	}

	// get environment(): ApiMode { return this.#environment }


	private localConfig(config: SdkConfig/* & { organization?: string } */): void {
		
	}


	config(config: CommerceLayerConfig): CommerceLayerProvisioningClient {

		debug('config %o', config)

		// CommerceLayer config
		this.localConfig(config)
		// ResourceAdapter config
		// To rebuild baseUrl in client in case only the domain is defined
		// if (!config.organization) config.organization = this.currentOrganization
		this.#adapter.config(config)

		return this

	}

	
	resources(): readonly string[] {
		return CommerceLayerProvisioningStatic.resources()
	}
	

	// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any
	isApiError(error: any): error is ApiError {
		return CommerceLayerProvisioningStatic.isApiError(error)
	}


	addRequestInterceptor(onFulfilled?: RequestInterceptor, onRejected?: ErrorInterceptor): number {
		return this.#adapter.interceptors.request.use(onFulfilled, onRejected)
	}

	addResponseInterceptor(onFulfilled?: ResponseInterceptor, onRejected?: ErrorInterceptor): number {
		return this.#adapter.interceptors.response.use(onFulfilled, onRejected)
	}

	removeInterceptor(type: InterceptorType, id: number): void {
		this.#adapter.interceptors[type].eject(id)
	}


	addRawResponseReader(options?: { headers: boolean }): RawResponseReader {

		const reader: RawResponseReader = {
			id: undefined,
			rawResponse: undefined,
			headers: undefined,
		}

		function rawResponseInterceptor(response: ResponseObj): ResponseObj {
			reader.rawResponse = response?.data
			if (options?.headers) reader.headers = (response.headers as HeadersObj)
			return response
		}
		
		const interceptor = this.addResponseInterceptor(rawResponseInterceptor)
		reader.id = interceptor

		return reader

	}

	removeRawResponseReader(reader: number | RawResponseReader): void {
		const id = (typeof reader === 'number') ? reader : reader?.id
		if (id && (id >= 0)) this.removeInterceptor('response', id)
	}

}



const CommerceLayerProvisioning = (config: CommerceLayerInitConfig): CommerceLayerProvisioningClient => {
	return new CommerceLayerProvisioningClient(config)
}


export default CommerceLayerProvisioning
export { CommerceLayerProvisioning }

export type { CommerceLayerProvisioningClient, CommerceLayerConfig, CommerceLayerInitConfig }
